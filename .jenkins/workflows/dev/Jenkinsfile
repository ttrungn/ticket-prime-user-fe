pipeline {
    agent any

    tools {
        git 'Default'
    }

    environment {
        // AWS credentials injected from Jenkins credentials store
        AWS_ACCESS_KEY_ID     = credentials('TP_FE_AWS_ACCESS_KEY_ID')
        AWS_SECRET_ACCESS_KEY = credentials('TP_FE_AWS_SECRET_KEY')

        // Terraform variables as environment variables
        TF_VAR_state_bucket_name     = credentials('TP_FE_TF_STATE_BUCKET')
        TF_VAR_aws_region            = credentials('TP_FE_AWS_REGION_DEV')
        TF_VAR_cloudfront_acm_region = credentials('TP_FE_AWS_CLOUDFRONT_ACM_REGION')
        TF_VAR_domain_name           = credentials('TP_FE_AWS_DOMAIN_NAME_DEV')
        TF_VAR_hosted_zone_id        = credentials('TP_FE_AWS_HOSTED_ZONE_ID')
        TF_VAR_bucket_name           = credentials('TP_FE_AWS_S3_BUCKET_DEV')
    }

    stages {
        stage('Checkout') {
            steps {
                echo '📦 Checking out code from main branch...'
                git url: 'https://github.com/ttrungn/ticket-prime-user-fe.git', branch: 'main'
                echo '✅ Checkout complete.'
            }
        }

        stage('Terraform Bootstrap') {
            steps {
                dir('terraform/dev/bootstrap') {
                    echo '🧱 Bootstrapping Terraform state bucket...'

                    sh '''
                        set -e

                        # Check if the bucket already exists
                        echo "🔍 Checking if bucket $TF_VAR_state_bucket_name exists..."
                        if aws s3api head-bucket --bucket "$TF_VAR_state_bucket_name" 2>/dev/null; then
                            echo "✅ Bucket exists — importing into Terraform..."
                            terraform init -input=false
                            terraform import aws_s3_bucket.state_bucket "$TF_VAR_state_bucket_name"
                        else
                            echo "🪣 Bucket does not exist — creating with Terraform..."
                            terraform init -input=false
                            terraform apply -auto-approve
                        fi
                    '''

                    echo '✅ Bootstrap complete.'
                }
            }
        }

        stage('Terraform Provision Init') {
            steps {
                dir('terraform/dev/provision') {
                    echo '🔐 Initializing Terraform with secure backend config...'

                    withEnv(["TF_STATE_KEY=" + "$TF_VAR_bucket_name" + "/terraform.tfstate"]) {
                        sh '''
                            terraform init -reconfigure \
                            -backend-config="bucket=$TF_VAR_state_bucket_name" \
                            -backend-config="key=$TF_STATE_KEY" \
                            -backend-config="region=$TF_VAR_aws_region" \
                            -backend-config="encrypt=true"
                        '''
                    }

                    echo '✅ Terraform init done.'
                }
            }
        }

        stage('Terraform Provision Plan') {
            steps {
                dir('terraform/dev/provision') {
                    echo '🧠 Running Terraform plan...'
                    sh 'terraform plan'
                    echo '✅ Terraform plan complete.'
                }
            }
        }

        stage('Terraform Provision Apply') {
            steps {
                dir('terraform/dev/provision') {
                    echo '⚙️ Applying Terraform changes...'
                    sh 'terraform apply -auto-approve'
                    echo '✅ Terraform apply completed.'
                }
            }
        }

        stage('Build Application') {
            steps {
                echo '📦 Installing npm dependencies...'
                sh 'npm install'
                echo '🏗️ Building React application...'
                sh 'npm run build'
                echo '✅ Build complete.'
            }
        }

        stage('Deploy to S3') {
            steps {
                echo "☁️ Deploying to S3 bucket: $TF_VAR_bucket_name..."
                sh 'aws s3 sync ./build/ s3://$TF_VAR_bucket_name/ --delete'
                echo '✅ Deployment to S3 completed.'
            }
        }
    }

    post {
        always {
            echo '🧹 Cleaning workspace...'
            cleanWs()
            echo '✅ Cleanup done.'
        }
    }
}
