pipeline {
    agent any

    tools {
        git 'Default'
        nodejs 'Default'
    }

    environment {
        // AWS credentials injected from Jenkins credentials store
        AWS_ACCESS_KEY_ID     = credentials('TP_FE_AWS_ACCESS_KEY_ID')
        AWS_SECRET_ACCESS_KEY = credentials('TP_FE_AWS_SECRET_KEY')
        AWS_DEFAULT_REGION    = credentials('TP_AWS_REGION_SINGAPORE')

        // Terraform variables as environment variables
        TF_VAR_state_bucket_name     = credentials('TP_AWS_TF_STATE_BUCKET')
        TF_VAR_aws_region            = credentials('TP_AWS_REGION_SINGAPORE')
        TF_VAR_cloudfront_acm_region = credentials('TP_FE_AWS_CLOUDFRONT_ACM_REGION')
        TF_VAR_domain_name           = credentials('TP_FE_AWS_DOMAIN_NAME_DEV')
        TF_VAR_hosted_zone_id        = credentials('TP_AWS_HOSTED_ZONE_ID')
        TF_VAR_bucket_name           = credentials('TP_FE_AWS_S3_BUCKET_DEV')
    }

    stages {
        stage('Checkout') {
            steps {
                echo 'INFO: Starting source code checkout from Git repository (dev branch)...'
                git url: 'https://github.com/ttrungn/ticket-prime-user-fe.git',
                    branch: 'dev'
                echo 'INFO: Git checkout completed successfully.'
            }
        }

        stage('Run Bootstrap Pipeline') {
            steps {
                build(
                    job: 'ticket-prime-common-state_bucket',
                    parameters: [
                        // Always try to use the main branch
                        string(name: 'current_branch', value: 'main')
                    ],
                    wait: true,
                    propagate: true
                )
            }
        }

        stage('Terraform Provision') {
            when {
                changeset '**/terraform/dev/provision/**'
            }
            steps {
                dir('terraform/dev/provision') {
                    echo 'INFO: Starting Terraform provisioning workflow...'

                    withEnv(["TF_STATE_KEY=${TF_VAR_bucket_name}/terraform.tfstate"]) {
                        sh '''
                            echo "INFO: Initializing Terraform backend..."
                            terraform init -reconfigure \
                                -backend-config="bucket=$TF_VAR_state_bucket_name" \
                                -backend-config="key=$TF_STATE_KEY" \
                                -backend-config="region=$TF_VAR_aws_region" \
                                -backend-config="encrypt=true"

                            echo "INFO: Running Terraform plan..."
                            terraform plan -input=false -out=tfplan

                            echo "INFO: Applying Terraform changes..."
                            terraform apply -auto-approve tfplan
                        '''
                    }

                    echo 'INFO: Terraform provisioning stage completed.'
                }
            }
        }

        stage('Build Application') {
            steps {
                echo 'INFO: Installing Node.js dependencies via npm...'
                sh 'npm install'
                echo 'INFO: Building React application using npm script...'
                sh 'npm run build'
                echo 'INFO: React application build process completed.'
            }
        }

        stage('Deploy to S3') {
            steps {
                echo "INFO: Starting deployment to S3 bucket: ${env.TF_VAR_bucket_name}..."
                withAWS(credentials: 'TP_FE_AWS_CREDENTIALS', region: "${env.AWS_DEFAULT_REGION}") {
                    s3Upload entries: [
                        [
                            bucket: "${env.TF_VAR_bucket_name}",
                            workingDir: 'dist',
                            includePathPattern: '**/*',
                            path: ''
                        ]
                    ]
                }
                echo 'INFO: Static files successfully deployed to S3.'
            }
        }

    }

    post {
        always {
            echo 'INFO: Cleaning up workspace to free resources...'
            cleanWs()
            echo 'INFO: Workspace cleanup complete.'
        }
    }
}

