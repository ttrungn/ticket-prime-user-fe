pipeline {
    agent any

    tools {
        git 'Default'
    }

    environment {
        // AWS credentials injected from Jenkins credentials store
        AWS_ACCESS_KEY_ID     = credentials('TP_FE_AWS_ACCESS_KEY_ID')
        AWS_SECRET_ACCESS_KEY = credentials('TP_FE_AWS_SECRET_KEY')

        // Terraform variables as environment variables
        TF_VAR_state_bucket_name     = credentials('TP_FE_TF_STATE_BUCKET')
        TF_VAR_aws_region            = credentials('TP_FE_AWS_REGION_DEV')
        TF_VAR_cloudfront_acm_region = credentials('TP_FE_AWS_CLOUDFRONT_ACM_REGION')
        TF_VAR_domain_name           = credentials('TP_FE_AWS_DOMAIN_NAME_DEV')
        TF_VAR_hosted_zone_id        = credentials('TP_FE_AWS_HOSTED_ZONE_ID')
        TF_VAR_bucket_name           = credentials('TP_FE_AWS_S3_BUCKET_DEV')
    }

    stages {
        stage('Checkout') {
            steps {
                echo 'INFO: Starting source code checkout from Git repository (dev branch)...'
                git url: 'https://github.com/ttrungn/ticket-prime-user-fe.git',
                    branch: 'dev'
                echo 'INFO: Git checkout completed successfully.'
            }
        }

        stage('Terraform Bootstrap') {
            // when {
            //     changeset '**/terraform/dev/**'
            // }
            steps {
                dir('terraform/dev/bootstrap') {
                    echo 'INFO: Starting Terraform bootstrap process...'

                    sh '''
                        set -e
                        echo "INFO: Checking if S3 bucket '$TF_VAR_state_bucket_name' exists..."

                        if aws s3api head-bucket --bucket "$TF_VAR_state_bucket_name" 2>/dev/null; then
                            echo "INFO: S3 bucket exists. Importing resources into Terraform state."

                            terraform init -input=false

                            terraform import aws_s3_bucket.state_bucket "$TF_VAR_state_bucket_name" || {
                                echo "WARNING: Bucket may already be imported or import failed."
                            }

                            terraform import aws_s3_bucket_versioning.state_bucket_versioning \
                                "$TF_VAR_state_bucket_name" || true

                            terraform import aws_s3_bucket_lifecycle_configuration.state_bucket_lifecycle_config \
                                "$TF_VAR_state_bucket_name" || true

                            terraform import aws_s3_bucket_public_access_block.state_bucket_block \
                                "$TF_VAR_state_bucket_name" || true

                            echo "INFO: Terraform resource import complete. Applying changes..."
                            terraform apply -auto-approve
                        else
                            echo "INFO: S3 bucket does not exist. Proceeding to create it via Terraform."
                            terraform init -input=false
                            echo "INFO: Applying changes..."
                            terraform apply -auto-approve
                        fi
                    '''

                    echo 'INFO: Terraform bootstrap stage completed.'
                }
            }
        }

        stage('Terraform Provision') {
            when {
                changeset '**/terraform/dev/**'
            }
            steps {
                dir('terraform/dev/provision') {
                    echo 'INFO: Starting Terraform provisioning workflow...'

                    /* groovylint-disable-next-line NestedBlockDepth */
                    withEnv(["TF_STATE_KEY=${TF_VAR_bucket_name}/terraform.tfstate"]) {
                        sh '''
                            echo "INFO: Initializing Terraform backend..."
                            terraform init -reconfigure \
                                -backend-config="bucket=$TF_VAR_state_bucket_name" \
                                -backend-config="key=$TF_STATE_KEY" \
                                -backend-config="region=$TF_VAR_aws_region" \
                                -backend-config="encrypt=true"

                            echo "INFO: Running Terraform plan..."
                            terraform plan

                            echo "INFO: Applying Terraform changes..."
                            terraform apply -auto-approve
                        '''
                    }

                    echo 'INFO: Terraform provisioning stage completed.'
                }
            }
        }

        stage('Build Application') {
            steps {
                echo 'INFO: Installing Node.js dependencies via npm...'
                sh 'npm install'
                echo 'INFO: Building React application using npm script...'
                sh 'npm run build'
                echo 'INFO: React application build process completed.'
            }
        }

        stage('Deploy to S3') {
            steps {
                echo "INFO: Starting deployment to S3 bucket: $TF_VAR_bucket_name..."
                sh '''
                    aws s3 sync ./build/ s3://$TF_VAR_bucket_name/ --delete
                '''
                echo 'INFO: Static files successfully deployed to S3.'
            }
        }
    }

    post {
        always {
            echo 'INFO: Cleaning up workspace to free resources...'
            cleanWs()
            echo 'INFO: Workspace cleanup complete.'
        }
    }
}

